

http://rodrigopolo.com/ffmpeg/cheats.php#Get Video File Information
 ffmpeg -i video.flv
#Split a video into images
 ffmpeg -f image2 -i image%d.jpg imagestovideo.mpg
#Convert images into a video
 ffmpeg -i video.flv -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio.mp3
	vn: helps to disable video recording during the conversion.
	ar: helps you set audio sampling rate in Hz.
	ab: set the audio bitrate.
	ac: to set the number of audio channels.
	-f: format.
#Convert a video into mp3 format
 ffmpeg -i video.flv -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio.mp3
#Covert flv video file to mpg format
 ffmpeg -i video.flv video.mpg
#Convert video into animated gif
 ffmpeg -i video.flv animated.gif.mp4
#Convert mpg video file to flv
 ffmpeg -i video.mpg -ab 26k -f flv video1.flv
#Convert avi video file to mpeg
 ffmpeg -i video.avi -target pal-dvd -ps 2000000000 -aspect 16:9 video.mpeg
	target pal-dvd : Output format
	ps 2000000000 maximum size for the output file, in bits (here, 2 Gb).
	aspect 16:9 : Widescreen.
#Convert a video to CD or DVD format
 ffmpeg -i video.mpg -target vcd vcd_video.mpg
#Extract audio from video file
 ffmpeg -i video1.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio3.mp3
#Mix a video and audio together
 ffmpeg -i audio.mp3 -i video.avi video_audio_mix.mpg
#Increase/Reduce Video Playback Speed
 ffmpeg -i video.mpg -vf "setpts=0.5*PTS" highspeed.mpg
 ffmpeg -i video.mpg -vf "setpts=4.0*PTS" lowerspeed.mpg -hide_banner

#Compare/Test Video and Audio Quality
 ffplay video1.mp4
#Add Photo or Banner to Audio
 ffmpeg -loop 1 -i image.jpg -i Bryan\ Adams\ -\ Heaven.mp3 -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest output.mp4
#Add subtitles to a Movie
 ffmpeg -i video.mp4 -i subtitles.srt -map 0 -map 1 -c copy -c:v libx264 -crf 23 -preset veryfast video-output.mkv

#http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/AV1-A-First-Look-127133.aspx?CategoryID=429

ffmpeg -y -i input.mp4 -c:v libx265  -preset veryslow -tune ssim  -x265-params bitrate=6000:vbv-maxrate=12000  -pass 1 -f mp4 NUL & \ 
ffmpeg -i input.mp4 -c:v libx265  -preset veryslow -tune ssim  -x265-params bitrate=6000:vbv-maxrate=12000 -pass 2 output_HEVC.mp4
#H.264:
ffmpeg -y -i input.mp4 -c:v libx264  -preset veryslow -tune ssim  -b:v 6000K -maxrate 12000K  -pass 1 -f mp4 NUL & \
ffmpeg -i input.mp4 -c:v libx264  -preset veryslow -tune ssim  -b:v 6000K -maxrate 12000K   -pass 2 output_H264.mp4 
#VP9: 
ffmpeg -y -i input.mp4 -c:v libvpx-vp9 -pass 1 -b:v 6000K -threads 8 -speed 4 -tile-columns 4 -auto-alt-ref 1 -lag-in-frames 25 -frame-parallel 1 -f  webm NUL && \
ffmpeg -i input.mp4 -c:v libvpx-vp9 -pass 2 -b:v 6000K -minrate 6000K -maxrate 12000K  -threads 8 -speed 0 -tile-columns 4 -auto-alt-ref 1 -lag-in-frames 25 -frame-parallel 1 output_VP9.webm
#AV1: 
ffmpeg -y -i input.mp4 -c:v libaom-av1 -strict -2 -b:v 6000K -maxrate 12000K -cpu-used 8  -pass 1 -f matroska NUL & \
ffmpeg -i input.mp4 -c:v libaom-av1 -strict -2 -b:v 6000K -maxrate 12000K -cpu-used 0   -pass 2 output_AV1.mkv


#http://rodrigopolo.com/ffmpeg/cheats.php

High quality 2 Pass
#https://www.cheatography.com/thetartankilt/cheat-sheets/ffmpeg/ffmpeg -y -i INPUT -r 30000/1001 -b 2M -bt 4M -vcodec libx264 -pass 1 -vpre fastfirstpass -an output.mp4
ffmpeg -y -i INPUT -r 30000/1001 -b 2M -bt 4M -vcodec libx264 -pass 2 -vpre hq -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
iPod-iPhone 320 width
ffmpeg -i INPUT -s 320x240 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 -vpre ipod320 -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
iPod-iPhone 640 width
ffmpeg -i INPUT -s 640x480 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 -vpre ipod640 -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
Hight quality, 2 pass without presset
ffmpeg -y -i input -r 24000/1001 -b 6144k -bt 8192k -vcodec libx264 -pass 1 -flags +loop -me_method dia -g 250 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -bf 16 -b_strategy 1 -i_qfactor 0.71 -cmp +chroma -subq 1 -me_range 16 -coder 1 -sc_threshold 40 -flags2 -bpyramid-wpred-mixed_refs-dct8x8+fastpskip -keyint_min 25 -refs 1 -trellis 0 -directpred 1 -partitions -parti8x8-parti4x4-partp8x8-partp4x4-partb8x8-an output.mp4
ffmpeg -y -i input -r 24000/1001 -b 6144k -bt 8192k -vcodec libx264 -pass 2 -flags +loop -me_method umh -g 250 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -bf 16 -b_strategy 1 -i_qfactor 0.71 -cmp +chroma -subq 8 -me_range 16 -coder 1 -sc_threshold 40 -flags2 +bpyramid+wpred+mixed_refs+dct8x8+fastpskip -keyint_min 25 -refs 4 -trellis 1 -directpred 3 -partitions +parti8x8+parti4x4+partp8x8+partb8x8-acodec libfaac -ac 2 -ar 44100 -ab 128k output.mp4
iPod-iPhone 320 width, without presset
ffmpeg -i INPUT -s 320x240 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 -coder 0 -bf 0 -flags2 -wpred-dct8x8 -level 13 -maxrate 768k -bufsize 3M-acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
iPod-iPhone 640 width, without presset
ffmpeg -i INPUT -s 320x240 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 coder 0 -bf 0 -refs 1 -flags2 -wpred-dct8x8 -level 30 -maxrate 10M -bufsize 10M-acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
iPod-iPhone, 2 pass custom
ffmpeg -y -i input -r 30000/1001 -s 480x272 -aspect 480:272 -vcodec libx264 -b 512k -bt 1024k -maxrate 4M -flags +loop -cmp +chroma -me_range 16 -g 300 -keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq "blurCplx^(1-qComp)" -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -coder 0 -refs 1 -bufsize 4M -level 21 -partitions parti4x4+partp8x8+partb8x8 -subq 5 -f mp4 -pass 1 -an -title "Title" output.mp4
ffmpeg -y -i input -r 30000/1001 -s 480x272 -aspect 480:272 -vcodec libx264 -b 512k -bt 1024k -maxrate 4M -flags +loop -cmp +chroma -me_range 16 -g 300 keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq "blurCplx^(1-qComp)" -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -coder 0 -refs 1 -bufsize 4M -level 21 -partitions parti4x4+partp8x8+partb8x8 -subq 5 -f mp4 -pass 2 -acodec libfaac -ac 2 -ar 44100 -ab 128k -title "Title" output.mp4 
DV Video
To DV
ffmpeg -i input -target ntsc-dv -aspect 4:3 -y output.dv
From DV To Microsoft AVI DV
ffmpeg -i input.dv -vcodec copy -vtag dvsd -acodec pcm_s16le -f avi -aspect 4:3 -y output.avi
Audio
AAC Stereo HQ 
-acodec libfaac -ac 2 -ar 48000 -ab 192k
AAC Stereo SQ 
-acodec libfaac -ac 2 -ar 44100 -ab 128k
AAC 5.1 HQ 
-acodec libfaac -ac 6 -ar 48000 -ab 448k
AAC 5.1 LQ 
-acodec libfaac -ac 6 -ar 44100 -ab 224k
Eac3To
AC3 5.1 Channel Mapping Fix
eac3to from_true_hd.ac3 fixed_mapping.ac3 -blu-ray -448
AAC to AC3 
From AAC to WAV with faad2: 
faad2 -o temp_audio.wav input.aac
From WAV to AC3 with eac3to 
eac3to temp_audio.wav output.ac3 -448
AC3 to AAC 
From AC3 to a remapped AC3 with eac3to: 
eac3to input.ac3 temp_remaped.ac3 -448 -resampleTo48000 -2,1,0,3,4,5
From remapped AC3 to AAC with FFmpeg 
ffmpeg -y -i temp_remaped.ac3 -vn -acodec libfaac -ac 6 -ar 48000 -ab 384k output.m4a

Other FFmpeg Options
-threads
thread count, 0 means all threads available
-y
overwrite output files
-ss
time_off set the start time offset
-t
duration record or transcode "duration" seconds of audio/video
-ildct
Interlaced

#https://lzone.de/cheat-sheet/ffmpeg
#https://www.cheatography.com/thetartankilt/cheat-sheets/ffmpeg/
Video options
-b bRate
set video bitrate (in kbit/s)


-fixaspect
fix aspect ratio
-bt toler­ance
set video bitrate tolerance (in kbit/s)
-maxrate bRate
-minrate bRate
set maximum or minimum video bitrate tolerance (in kbit/s)
-bufsize size
set rateco­ntrol buffer size (in kByte)
-sameq
use same video quality as source (implies VBR)
-newvideo
add a new video stream to the current output stream

Size specif­ication
K or k 103 1000 bytes Kilobytes
M 106 1000000 bytes Megabytes
G 109 1000000000 Gigabytes

Ki 210 1024 Kibibyte 
Mi 220 1048576 Mebibyte
Gi 230 1073741824 Gibibyte

Audio Options
-ab bRate  set audio bitrate (in kbit/s)
-aframes N Set the number of audio frames to record. [an alias for -frames:a]
-aq q Set the audio quality (codec­-sp­ecific, VBR). [an alias for -q:a]
-an Disable audio recording
-acodec codec  Set the audio codec. [an alias for -codec:a]
Use 'copy' to copy stream.
-vol Change the audio volume in multiples of 256 where 256 = 100% (normal) volume. e.g. 512 = 200%
-newaudio add a new audio stream to the current output stream
-alang code  set the ISO 639 language code (3 letters) of the current audio stream

Useful examples  
Transcode input file to DVD PAL format
ffmpeg -y -threads 8 -i inFile -target pal-dvd -ac 2 -aspect 16:9 -acodec mp2 -ab 224000 -vf pad=0:­0:0:0 outFile

Convert to grayscale
ffmpeg -y -i inFile -flags gray outFile

Create 1 minute of audio noise
ffmpeg -ar 48000 -t 60 -f s16le -acodec pcm_s16le -i /dev/u­random -ab 64K -f mp2 -acodec mp2 -y noise.mp2

Extract images from video
ffmpeg -i foo.avi -r 1 -s WxH -f image2 outFil­e%0­3d.png

Convert image file to other formats
ffmpeg -i foo012­2.png foo.tiff
pgm, ppm, pam, pgmyuv, jpeg, gif, png, tiff, sgi

Convert images to AVI file
ffmpeg -f image2 -i foo-%0­3d.jpeg -r 12 -s WxH foo.avi
Convert a WAV file to MP3
ffmpeg -i source­_so­ng.wav -vn -ar 44100 -ac 2 -ab 192 -f mp3 final_­son­g.mp3
Extract audio from a video, transc­oding it to MP3
ffmpeg -i source.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 sound.mp3


MKV
By default this command will produce an output video file using libx264 library (which produces H.264 video stream) and libvorbis library (which produces VORBIS audio stream). You can use the command specifying this options (which will produce the same result):
ffmpeg -i input_video.avi -f matroska -vcodec libx264 -acodec libvorbis output_video.mkv

In which we are using the parameters:
-f matroska which specifies that the output file will have Matroska format
-vcodec libx264 we're telling here to use the libx264 library which encodes video in H.264 coded streams. As we have said before you can use different video encoders. You can use other codecs changing libx264 for 'vp8' if you want to use VP8 encoding through libvpx library or 'vp9' if you want to use VP9 encoding. You can use more video encoders but the most widely supported codecs are H.264 and VP8.
-acodec libvorbis which specifies to use the libvorbis library which encodes audio using VORBIS codec. You can chose another audio codec. Use 'aac' for AAC encoding or 'opus' for OPUS encoding.


MP4:
ffmpeg -i example.mov -f mp4 -vcodec libx264 -preset fast -profile:v main -acodec aac example.mp4 -hide_banner

In this conversion we are using some parameters:
-f mp4 with this parameter we are specifying that the output file will have mp4 format.
-vcodec libx264 with this parameter we are specifying the video codec that we want to use. In this case we are using libx264 which is a H264 video encoder. (we can use the parameter -c:v libx264 instead)
-preset fast with this parameter we are specifying the encoder (libx264) some options for the encoding process. We can use any of the different presets that exists (ultrafast, superfast, veryfast, faster, fast, medium, slow, slower or veryslow from the fastest to the slowest). Slower presets will produce better quality video in less space but it will take more time to process.
-profile:v main this parameter is similar to preset. The profile parameter indicates the encoder if it can use some advanced options to improve the video compression. The downside is that using these advanced options can make the video unplayable on some old devices. We are using the main profile as it is very well supported but we can use one of the following: baseline, main, high, high10, high422, and high444
-acodec aac with this parameter we are specifying the audio encoder to use, in this case we are using audio aac codec.
-hide_banner will hide some compilation information about ffmpeg.
crf 
the constant rate factor is a value between 0 and 51. It indicates the encoder to attempt to achieve a certain output quality. The value 0 indicates lossless and 51 is the worst possible, with 23 as the default value. A lower value indicates higher quality.
bitrate 
we can indicate the encoder a bitrate so the encoder will try to achieve it. We can indicate an average bit rate, a minimum bitrate or a maximum bitrate.
faststart this is a must when you are going to use your video file online. This will move some metadata information to the beginning of the file and allow the video to begin playing before it is completely downloaded.


WebM:
To convert a video file example.mp4 into webm format we can do with the following command:
ffmpeg -i example.mp4 -f webm -c:v libvpx -b:v 1M -acodec libvorbis example.webm -hide_banner
We are using the parameters:
-f webm this makes ffmpeg to produce an output file in webm format.
-c:v libvpx with this parameter we are specifying to use the libvpx encoder for video. This encoder will produce a stream in vp8 codec format which is the codec we want.
-acodec libvorbis with this parameter we are specifying to use libvorbis encoder for audio streams.
-b:v 1M with this parameter we are telling ffmpeg to attempt to achieve a bitrate of 1Mb for the output file. This is a big difference with mp4 encoding. We should specify the variable bitrate that we want to achieve. We can aviod this parameter, but the results will be really bad (by default the encoder lowers the quality too much). There is a crf option in the documentation of the encoder that should work like in mp4-h264 encoding but in my personal experience that parameter just doesn't work, so we must use the bitrate option.
-hide_banner as usual with this parameter we hide certain information about compilation of ffmpeg.


Aspect Ratio:
ffmpeg -i video_1920.mp4 -vf scale=640:360 video_640.mp4 -hide_banner
It is only necessary to indicate the scale video filter with the new desired resolution (640:360) with -vf scale=640:360. To consider:
We can indicate any resolution we want, but the resulting video will always have the same aspect ratio. That is, it will not distort the images, if video is in 16:9 aspect ratio, it will keep the video in 16:9 aspect ratio. The program will adjust the resulting video so it can fit in the resolution that we have given.
When changing resolution, the video must go throught the encoding process another time, so the process can be slow depending on the output format and the codec you're using for the output.
We have not mentioned it, but most of the time it does not make sense to transform a video to a higher resolution because, there can't be any improvement in video quality.
Changing the video aspect ratio
If we want to change the look of the video, knowing that the image will appear distorted, we can use an additional filter "setdar". Imagine that in the previous case we want to change the 16:9 aspect ratio to 4:3, and therefore the video at a resolution of 4:3 aspect ratio, which in this case it will be 640x480. The ffmpeg command to make this transformation would be:
ffmpeg -i video_1920.mp4 -vf scale=640:480,setdar=4:3 video_640x480.mp4 -hide_banner

MKV:
ffmpeg -i input_video.avi -f matroska -vcodec libx264 -acodec libvorbis output_video.mkv
In which we are using the parameters:
-f matroska which specifies that the output file will have Matroska format
-vcodec libx264 we're telling here to use the libx264 library which encodes video in H.264 coded streams. As we have said before you can use different video encoders. You can use other codecs changing libx264 for 'vp8' if you want to use VP8 encoding through libvpx library or 'vp9' if you want to use VP9 encoding. You can use more video encoders but the most widely supported codecs are H.264 and VP8.
-acodec libvorbis which specifies to use the libvorbis library which encodes audio using VORBIS codec. You can chose another audio codec. Use 'aac' for AAC encoding or 'opus' for OPUS encoding.

3GP:
So if you want to convert any video into this 3GP format using H.263 and AMR_NB codecs you should need to resize the video, and to convert the audio into a supported audio stream. This is done by the FFMPEG command:
ffmpeg -i input_video.avi -f 3gp -vcodec h263 -vf scale=352x288 -acodec amr_nb -ar 8000 -ac 1 output_video.3gp
With parameters:
-f 3gp same as before, we specify that the output file format is 3GP
-vcodec h263 which specifies output file using H.263 encoder.
-vf scale=352x288 which will resize the image from the input video into a 352x288px size. This is one of the sizes allowed by H.263 codec, but you can use the one you want from the list of supported sizes (128x96, 176x144, 352x288, 704x576 or 1408x1152). If the input video is in a different aspect ratio size, FFMPEG will add outer black boxes mantaining the original video aspect ratio and using the new size. Know more about resizing videos using FFMPEG.
-acodec amr_nb which specifies output audio codec
-ar 8000 will convert audio streams into 8000Hz audio streams. This is required by the AMR_NB encoder.
-ac 1 will transform audio from stereo into mono. This is also required by the AMR_NB encoder.

#https://trac.ffmpeg.org/wiki/Encode/H.264Convert .avi to .flv
ffmpeg -i source.avi -ab 56 -ar 44100 -b 200 -r 15 -s 320x240 -f flv output.flv

Convert .avi to animated gif
ffmpeg -i video.avi animat­ed.gif

Attach a picture to an mp3
ffmpeg -i input.mp3 -i cover.png -c copy -metad­ata:s:v title=­"­Album cover" -metad­ata:s:v commen­t="Cover (Front­)" out.mp3
Mix a video with a sound file
ffmpeg -i song.wav -i source­_vi­deo.avi outvid­eo.mpg

Write an mp3 with an ID3v2.3 header and an ID3v1 footer
ffmpeg -i inFile -id3v2­_ve­rsion 3 -write­_id3v1 1 outFil­e.mp3
Concat­enate input files
cat inFile1 inFile2 | ffmpeg -f mpeg -i - -vcodec copy -acodec copy outFil­e.mpg

Encode a clip with codec with bitrate, and mp3 audio
ffmpeg -i clip.avi -vcodec libxvid -b 800000 -acodec libmp3lame -ab 128 new-cl­ip.avi
Merge audio stream with video stream from different files

#https://www.bugcodemaster.com/article/convert-videos-webm-format-using-ffmpeg
To convert a video file example.mp4 into webm format we can do with the following command:
ffmpeg -i example.mp4 -f webm -c:v libvpx -b:v 1M -acodec libvorbis example.webm -hide_banner
We are using the parameters:
-f webm this makes ffmpeg to produce an output file in webm format.
-c:v libvpx with this parameter we are specifying to use the libvpx encoder for video. This encoder will produce a stream in vp8 codec format which is the codec we want.
-acodec libvorbis with this parameter we are specifying to use libvorbis encoder for audio streams.
-b:v 1M with this parameter we are telling ffmpeg to attempt to achieve a bitrate of 1Mb for the output file. This is a big difference with mp4 encoding. We should specify the variable bitrate that we want to achieve. We can aviod this parameter, but the results will be really bad (by default the encoder lowers the quality too much). There is a crf option in the documentation of the encoder that should work like in mp4-h264 encoding but in my personal experience that parameter just doesn't work, so we must use the bitrate option.
-hide_banner as usual with this parameter we hide certain information about compilation of ffmpeg.

#https://www.bugcodemaster.com/article/how-extract-and-join-video-files-using-ffmpeg
ffmpeg -i video_1920.mp4 -vf scale=640:360 video_640.mp4 -hide_banner
It is only necessary to indicate the scale video filter with the new desired resolution (640:360) with -vf scale=640:360. To consider:
We can indicate any resolution we want, but the resulting video will always have the same aspect ratio. That is, it will not distort the images, if video is in 16:9 aspect ratio, it will keep the video in 16:9 aspect ratio. The program will adjust the resulting video so it can fit in the resolution that we have given.
When changing resolution, the video must go throught the encoding process another time, so the process can be slow depending on the output format and the codec you're using for the output.
We have not mentioned it, but most of the time it does not make sense to transform a video to a higher resolution because, there can't be any improvement in video quality.

ffmpeg -i video_1920.mp4 -vf scale=640:480,setdar=4:3 video_640x480.mp4 -hide_banner
ffmpeg -i video_1920.mp4 -vf scale=200:400,setsar=1:1 video_200x400.mp4 -hide_banner

#https://trac.ffmpeg.org/wiki/Encode/H.264


ffmpeg -i example.mov -f mp4 -vcodec libx264 -preset fast -profile:v main -acodec aac example.mp4 -hide_banner
In this conversion we are using some parameters:
-f mp4 with this parameter we are specifying that the output file will have mp4 format.
-vcodec libx264 with this parameter we are specifying the video codec that we want to use. In this case we are using libx264 which is a H264 video encoder. (we can use the parameter -c:v libx264 instead)
-preset fast with this parameter we are specifying the encoder (libx264) some options for the encoding process. We can use any of the different presets that exists (ultrafast, superfast, veryfast, faster, fast, medium, slow, slower or veryslow from the fastest to the slowest). Slower presets will produce better quality video in less space but it will take more time to process.
-profile:v main this parameter is similar to preset. The profile parameter indicates the encoder if it can use some advanced options to improve the video compression. The downside is that using these advanced options can make the video unplayable on some old devices. We are using the main profile as it is very well supported but we can use one of the following: baseline, main, high, high10, high422, and high444
-acodec aac with this parameter we are specifying the audio encoder to use, in this case we are using audio aac codec.
-hide_banner will hide some compilation information about ffmpeg.
